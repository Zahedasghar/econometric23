---
title: "Introduction and Overview"
subtitle: "EC-613 Econometric Methods"
author: "Zahid Asghar"
date: "2023-09-16"
format: revealjs
    #theme: ['default', 'my-css.css']
    # self_contained: true
execute: 
  freeze: auto
---

```{r}
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(leaflet, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr)
# Define pink color
red_pink <- "#e64173"
# Notes directory
dir_slides <- "~/Dropbox/UO/Teaching/EC421W22/notes/01-intro/"
# Knitr options
opts_chunk$set(
  comment = "#>",
  fig.align = "center",
  fig.height = 7,
  fig.width = 10.5,
  # dpi = 300,
  # cache = T,
  warning = F,
  message = F
)
```

# Prologue

## R showcase

### New this week

Because part of this course is about learning and implementing .mono[R], I'm going to share some interesting/amazing/fun applications of .mono[R].

[**Culture of Insight website**](https://cultureofinsight.shinyapps.io/location_mapper/)

-   .mono[R]-based web application
-   Maps your location data (as tracked by Google)
-   Great example of .mono[R]'s ability to extend beyond statistical programming
-   (Visualization matters.)

[**The .mono\[rayshader\] package**](https://github.com/tylermorganwall/rayshader)

-   Creates really cool shaded maps (easily!)
-   What else does one need?

## Why?

### Motivation

Let's start with a few **basic, general questions:**

1.  What is the goal of econometrics?

2.  Why do economists (or other people) study or use econometrics?

**One simple answer:** Learn about the world using data.

-   *Learn about the world* = Raise, answer, and challenge questions, theories, assumptions.

-   *data* = Plural of datum.

## Why?

### Example

GPA is an output from endowments (ability) and hours studied (inputs). So, one might hypothesize a model

$\text{GPA}=f(H, \text{SAT}, \text{PCT})$

where $H$ is hours studied, $\text{SAT}$ is SAT score and $\text{PCT}$ is the percentage of classes an individual attended. We expect that GPA will rise with each of these variables ( $H$, $\text{SAT}$, and $\text{PCT}$).

But who needs to *expect*?

We can test these hypotheses **using a regression model**.

## 

**Regression model:**

$$ \text{GPA}_i = \beta_0 + \beta_1 H_i + \beta_2 \text{SAT}_i + \beta_3 \text{PCT}_i + \varepsilon_i $$

We want to test estimate/test the relationship $\text{GPA}=f(H, \text{SAT}, \text{PCT})$.

## (Review) Questions

-   **Q:** How do we interpret $\beta_1$?

-   **A:** An additional hour in class correlates with a $\beta_1$ unit increase in an individual's GPA (controlling for SAT and PCT).

## (Review) Questions

-   **Q:** Are the $\beta_k$ terms population parameters or sample statistics?

-   **A:** Greek letters denote **population parameters**. Their estimates get hats, *e.g.*, $\hat{\beta}_k$.

-   **Q:** Can we interpret the estimates for $\beta_2$ as causal?

-   **A:** Not without making more assumptions and/or knowing more about the data-generating process.

-   **Q:** What is $\varepsilon_i$?

-   **A:** An individual's random deviation/disturbance from the population parameters.

## (Review) Questions

-   **Q:** Which assumptions do we impose when estimating with OLS?

-   **A:** The relationship between the GPA and the explanatory variables is linear in parameters, and $\varepsilon$ enters additively.

    -   The explanatory variables are **exogenous**, *i.e.*, $E[\varepsilon|X] = 0$.
    -   You've also typically assumed something along the lines of:<br> $E[\varepsilon_i] = 0$, $E[\varepsilon_i^2] = \sigma^2$, $E[\varepsilon_i \varepsilon_j] = 0$ for $i \neq j$.
    -   And (maybe) $\varepsilon_i$ is distributed normally.

# Assumptions

## How important can they be?

You've learned how **powerful and flexible** ordinary least squares (**OLS**) regression can be.

However, the results you learned required assumptions.

**Real life often violates these assumptions.**

EC asks "**what happens when we violate these assumptions?**"

-   Can we find a fix? (Especially: How/when is $\beta$ *causal*?)
-   What happens if we don't (or can't) apply a fix?

OLS still does some amazing things---but you need to know when to be **cautious, confident, or dubious**.

# Not everything is causal

```{r, spurious, echo = F, dev = "svg"}
tmp <- data.frame(
  year = 1999:2009,
  count = c(
    9, 8, 11, 12, 11, 13, 12, 9, 9, 7, 9,
    6, 5, 5, 10, 8, 14, 10, 4, 8, 5, 6
  ),
  type = rep(c("letters", "deaths"), each = 11)
)
ggplot(data = tmp, aes(x = year, y = count, color = type)) +
  geom_path() +
  geom_point(size = 4) +
  xlab("Year") +
  ylab("Count") +
  scale_color_manual(
    "",
    labels = c("Deaths from spiders", "Letters in the winning spelling bee word"),
    values = c(red_pink, "darkslategray")
  ) +
  theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

## Econometrics

An applied econometrician<sup>â€ </sup> needs a solid grasp on (at least) three areas

1.  The **theory** underlying econometrics (assumptions, results, strengths, weaknesses).

2.  How to **apply theoretical methods** to actual data.

3.  Efficient methods for **working with data**---cleaning, aggregating, joining, visualizing.

    *Applied econometrician* Practitioner of econometrics, *e.g.*, analyst, consultant, data scientist.

    **This course** aims to deepen your knowledge in each of these three areas.

    -   1 As before.
    -   2--3 **R**

# R

## What is R?

To quote the [R project website](https://www.r-project.org):

> R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows and MacOS.

--

What does that mean?

-   R was created for the statistical and graphical work required by econometrics.

-   R has a vibrant, thriving online community. ([stack overflow](https://stackoverflow.com/questions/tagged/r))

-   Plus it's **free** and **open source**.

------------------------------------------------------------------------

## Why are we using R?

1\. R is **free** and **open source**---saving both you and the university ðŸ’°ðŸ’µðŸ’°.

2\. *Related:* Outside of a small group of economists, private- and public-sector **employers favor R** over .mono\[Stata\] and most competing softwares.

3\. R is very **flexible and powerful**---adaptable to nearly any task, *e.g.*, 'metrics, spatial data analysis, machine learning, web scraping, data cleaning, website building, teaching. My website, the TWEEDS website, and these notes all came out of R.

------------------------------------------------------------------------

## Why are we using R?

4\. *Related:* R imposes **no limitations** on your amount of observations, variables, memory, or processing power. (I'm looking at **you**, .mono\[Stata\].)

5\. If you put in the work,<sup>â€ </sup> you will come away with a **valuable and marketable** tool.

6\. I ðŸ’– **R**

.footnote\[ \[â€ \]: Learning R definitely requires time and effort.\]

## 

```{r, statistical languages, echo = F, fig.height = 6, fig.width = 9, dev = "svg"}
# The popularity data
pop_df <- data.frame(
  lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
  n_jobs = c(107130, 66976, 48772, 25644, 11464, 3717, 1624),
  free = c(T, T, T, F, F, F, F)
)
pop_df %<>% mutate(lang = lang %>% factor(ordered = T))
# Plot it
ggplot(data = pop_df, aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
ggtitle(
  "Comparing statistical languages",
  subtitle = "Number of job postings on Indeed.com, 2019/01/06"
) +
scale_fill_manual(
  "Free?",
  labels = c("True", "False"),
  values = c(red_pink, "darkslategray")
) +
theme_pander(base_size = 17) +
theme(legend.position = "bottom")
```

# R + Examples

------------------------------------------------------------------------

# R + Regression

```{r, example: lm}
# A simple regression
{{fit <- lm(dist ~ 1 + speed, data = cars)}}
# Show the coefficients
coef(summary(fit))
# A nice, clear table
library(broom)
tidy(fit)
```

------------------------------------------------------------------------

# R + Plotting (w/ .mono\[plot\])

```{r, example: plot, echo = F, dev = "svg"}
# Load packages with dataset
library(gapminder)
# Create dataset
plot(
  x = gapminder$gdpPercap, y = gapminder$lifeExp,
  xlab = "GDP per capita", ylab = "Life Expectancy"
)
```

# R + Plotting (w/ .mono\[plot\])

# R + Plotting (w/ .mono\[ggplot2\])

```{r, example: ggplot2 v1, echo = F, dev = "svg"}
# Load packages
library(gapminder); library(dplyr)
# Create dataset
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.75) +
scale_x_continuous("GDP per capita", label = scales::comma) +
ylab("Life Expectancy") +
theme_pander(base_size = 16)
```

------------------------------------------------------------------------

# R + Plotting (w/ .mono\[ggplot2\])

```{r, example: ggplot2 v1 code, eval = F}
# Load packages
library(gapminder); library(dplyr)

# Create dataset
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.75) +
scale_x_continuous("GDP per capita", label = scales::comma) +
ylab("Life Expectancy") +
theme_pander(base_size = 16)
```

------------------------------------------------------------------------

# R + More plotting (w/ .mono\[ggplot2\])

```{r, example: ggplot2 v2, echo = F, dev = "svg"}
# Load packages
library(gapminder); library(dplyr)
# Create dataset
ggplot(
  data = filter(gapminder, year %in% c(1952, 2002)),
  aes(x = gdpPercap, y = lifeExp, color = continent, group = country)
) +
geom_path(alpha = 0.25) +
geom_point(aes(shape = as.character(year), size = pop), alpha = 0.75) +
scale_x_log10("GDP per capita", label = scales::comma) +
ylab("Life Expectancy") +
scale_shape_manual("Year", values = c(1, 17)) +
scale_color_viridis("Continent", discrete = T, end = 0.95) +
guides(size = F) +
theme_pander(base_size = 16)
```

------------------------------------------------------------------------

# R + More plotting (w/ .mono\[ggplot2\])

```{r, example: ggplot2 v2 code, eval = F}
# Load packages
library(gapminder); library(dplyr)

# Create dataset
ggplot(
  data = filter(gapminder, year %in% c(1952, 2002)),
  aes(x = gdpPercap, y = lifeExp, color = continent, group = country)
) +
geom_path(alpha = 0.25) +
geom_point(aes(shape = as.character(year), size = pop), alpha = 0.75) +
scale_x_log10("GDP per capita", label = scales::comma) +
ylab("Life Expectancy") +
scale_shape_manual("Year", values = c(1, 17)) +
scale_color_viridis("Continent", discrete = T, end = 0.95) +
guides(size = F) +
theme_pander(base_size = 16)
```

------------------------------------------------------------------------

# R + Animated plots (w/ .mono\[gganimate\])

```{r, example: gganimate, include = F, cache = T, eval = F}
# The package for animating ggplot2
library(gganimate)
# As before
gg <- ggplot(
  data = gapminder %>% filter(continent != "Oceania"),
  aes(gdpPercap, lifeExp, size = pop, color = country)
) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10("GDP per capita", label = scales::comma) +
facet_wrap(~continent) +
theme_pander(base_size = 16) +
theme(panel.border = element_rect(color = "grey90", fill = NA)) +
# Here comes the gganimate-specific bits
labs(title = "Year: {frame_time}") +
ylab("Life Expectancy") +
transition_time(year) +
ease_aes("linear")
# Save the animation
anim_save(
  animation = gg,
  filename = "ex_gganimate.mp4",
  path = dir_slides,
  width = 10.5,
  height = 7,
  units = "in",
  res = 150,
  nframes = 56
)
```

\[![Gapminder](ex_gganimate.gif)\]

# R + Animated plots (w/ .mono\[gganimate\])

```{r, example: gganimate code, eval = F}
# The package for animating ggplot2
library(gganimate)
# As before
ggplot(
  data = gapminder %>% filter(continent != "Oceania"),
  aes(gdpPercap, lifeExp, size = pop, color = country)
) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10("GDP per capita", label = scales::comma) +
facet_wrap(~continent) +
theme_pander(base_size = 16) +
theme(panel.border = element_rect(color = "grey90", fill = NA)) +
# Here comes the gganimate-specific bits
labs(title = "Year: {frame_time}") +
ylab("Life Expectancy") +
transition_time(year) +
ease_aes("linear")
```

```{r, example: plot code, eval = F}
# Load packages with dataset
library(gapminder)

# Create dataset
plot(
  x = gapminder$gdpPercap, y = gapminder$lifeExp,
  xlab = "GDP per capita", ylab = "Life Expectancy"
)
```

# R+maps

# Getting started with R

# Starting R

------------------------------------------------------------------------

## Installation

-   Install [R](https://www.r-project.org/).

-   Install [.mono\[RStudio\]](https://www.rstudio.com/products/rstudio/download/preview/).

-   **Optional/Overkill:** [Git](https://git-scm.com/downloads)

    -   Create an account on [GitHub](https://github.com/)
    -   Register for a student/educator [discount](https://education.github.com/discount_requests/new).
    -   For installation guidance and troubleshooting, check out Jenny Bryan's [website](http://happygitwithr.com/).

-   **Note:** The lab in 442 McKenzie has R installed and ready. That said, having a copy of R on your own computer will likely be very convenient for homework, projects, *etc.*

------------------------------------------------------------------------

## Resources

### Free(-ish)

-   Google (which inevitably leads to StackOverflow)
-   Time
-   Your classmates
-   Your GEs
-   Me
-   R resources [here](http://edrub.in/ARE212/resources.html) and [here](https://www.rstudio.com/online-learning/)

### Money

-   Book: [*R for Stata Users*](http://r4stats.com/books/r4stata/)
-   Short online course: [DataCamp](https://www.datacamp.com)

------------------------------------------------------------------------

## Some R basics

You will dive deeper into R in lab, but here six big points about R:

.more-left\[

1.  Everything is an **object**.

2.  Every object has a **name** and **value**.

3.  You use **functions** on these objects.

4.  Functions come in **libraries** (**packages**)

5.  R will try to **help** you.

6.  R has its **quirks**.

\]

.less-right\[

`foo`

`foo <- 2`

`mean(foo)`

`library(dplyr)`

`?dplyr`

`NA; error; warning`

\]

------------------------------------------------------------------------

## R *vs.* .mono\[Stata\]

Coming from .mono\[Stata\], here are a few important changes (benefits):

-   Multiple objects and arrays (*e.g.*, data frames) can exist in the same workspace (in memory). No more `keep`, `preserve`, `restore`, `snapshot` nonsense!

-   (Base) R comes with lots of useful built-in functions---and provides all the tools necessary for you to build your own functions. However, many of the *best* functions come from external libraries.

-   You don't need to `tset` or `xtset` data (you can if you really want... `ts`).

# Next: Metrics review(s)
